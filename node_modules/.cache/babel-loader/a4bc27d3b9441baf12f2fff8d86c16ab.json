{"ast":null,"code":"var _jsxFileName = \"/Users/kich555/Desktop/Development/Wecode/react-exercises/src/Lectures/OnChange/OnChange.js\";\nimport React, { Component } from \"react\";\nimport \"./OnChange.scss\";\n\nclass OnChange extends Component {\n  constructor() {\n    super();\n\n    this.handleChange = e => {\n      console.log(e.target.name);\n      this.setState({\n        [e.target.name]: e.target.value\n      }); //                ㄴ 계산된 속성명\n    };\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n  } // 1. 콘솔로그 대신, state에 유저 인풋 값을 업데이트\n  // 2. 업데이트 되는 state 객체를 콘솔에 출력\n  // handleEmail = (event) => {\n  //   this.setState({ email: event.target.value });\n  // };\n  // handlePassword = (event) => {\n  //   this.setState({ password: event.target.value });\n  // };\n  // Mission : 기능이 비슷한 위의 두 가지를 하나로 합치기\n\n\n  render() {\n    console.log(this.state); //항상 업데이트 된 값을 받게 된다. 이유: state가 업데이트될 때마다 render()되므로\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"onchange-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"top\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, \"email: \", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"email\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 18\n      }\n    }), \"password: \", /*#__PURE__*/React.createElement(\"input\", {\n      name: \"password\",\n      onChange: this.handleChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }\n    }, \"SUBMIT\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"contents\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }\n    }, \"email\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }, \"password\")));\n  }\n\n}\n\nexport default OnChange;","map":{"version":3,"sources":["/Users/kich555/Desktop/Development/Wecode/react-exercises/src/Lectures/OnChange/OnChange.js"],"names":["React","Component","OnChange","constructor","handleChange","e","console","log","target","name","setState","value","state","email","password","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,iBAAP;;AAEA,MAAMC,QAAN,SAAuBD,SAAvB,CAAiC;AAC/BE,EAAAA,WAAW,GAAG;AACZ;;AADY,SAsBdC,YAtBc,GAsBEC,CAAD,IAAO;AACpBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAC,CAACG,MAAF,CAASC,IAArB;AACA,WAAKC,QAAL,CAAc;AAAE,SAACL,CAAC,CAACG,MAAF,CAASC,IAAV,GAAiBJ,CAAC,CAACG,MAAF,CAASG;AAA5B,OAAd,EAFoB,CAGpB;AACD,KA1Ba;;AAGZ,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI;AAEXC,MAAAA,QAAQ,EAAE;AAFC,KAAb;AAID,GAR8B,CAU/B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;;AAQAC,EAAAA,MAAM,GAAG;AACPT,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKK,KAAjB,EADO,CAEP;;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BACS;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,QAAQ,EAAE,KAAKR,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADT,6BAEY;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,QAAQ,EAAE,KAAKA,YAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFZ,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHF,CADF,eAME;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF,CANF,CADF;AAaD;;AA7C8B;;AAgDjC,eAAeF,QAAf","sourcesContent":["import React, { Component } from \"react\";\nimport \"./OnChange.scss\";\n\nclass OnChange extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n    };\n  }\n\n  // 1. 콘솔로그 대신, state에 유저 인풋 값을 업데이트\n  // 2. 업데이트 되는 state 객체를 콘솔에 출력\n\n  // handleEmail = (event) => {\n  //   this.setState({ email: event.target.value });\n  // };\n\n  // handlePassword = (event) => {\n  //   this.setState({ password: event.target.value });\n  // };\n\n  // Mission : 기능이 비슷한 위의 두 가지를 하나로 합치기\n\n  handleChange = (e) => {\n    console.log(e.target.name);\n    this.setState({ [e.target.name]: e.target.value });\n    //                ㄴ 계산된 속성명\n  };\n\n  render() {\n    console.log(this.state);\n    //항상 업데이트 된 값을 받게 된다. 이유: state가 업데이트될 때마다 render()되므로\n    return (\n      <div className=\"onchange-wrapper\">\n        <div className=\"top\">\n          email: <input name=\"email\" onChange={this.handleChange} />\n          password: <input name=\"password\" onChange={this.handleChange} />\n          <button>SUBMIT</button>\n        </div>\n        <div className=\"contents\">\n          <div>email</div>\n          <div>password</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default OnChange;\n"]},"metadata":{},"sourceType":"module"}